{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  // state creating\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false); // request creating on useCallback\n\n  const request = useCallback(async (url, method = \"GET\", body = \"\", headers = {\n    \"Content-type\": \"application/json\"\n  }) => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url} status:${response.status}`);\n      }\n\n      const data = await response.json;\n      setLoading(false);\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    error,\n    request,\n    clearError\n  };\n};\n\n_s(useHttp, \"SYc1teNYvTbUwXic6Y0U6Xafeac=\");","map":{"version":3,"sources":["C:/MAMP/htdocs/projects/marvelHooks/src/hooks/http.hooks.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","ok","Error","status","data","json","e","message","clearError"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC,CAH2B,CAI3B;;AACA,QAAMO,OAAO,GAAGN,WAAW,CACzB,OACEO,GADF,EAEEC,MAAM,GAAG,KAFX,EAGEC,IAAI,GAAG,EAHT,EAIEC,OAAO,GAAG;AAAE,oBAAgB;AAAlB,GAJZ,KAKK;AACHP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACF,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,OAAN,CAA5B;;AAEA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAW,mBAAkBP,GAAI,WAAUI,QAAQ,CAACI,MAAO,EAA3D,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAA5B;AAEAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD,CAUE,OAAOe,CAAP,EAAU;AACVf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACa,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACD;AACF,GAxBwB,EAyBzB,EAzByB,CAA3B;AA2BA,QAAME,UAAU,GAAGpB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAAEH,IAAAA,OAAF;AAAWE,IAAAA,KAAX;AAAkBE,IAAAA,OAAlB;AAA2Bc,IAAAA;AAA3B,GAAP;AACD,CAnCM;;GAAMnB,O","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  // state creating\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  // request creating on useCallback\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = \"\",\r\n      headers = { \"Content-type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url} status:${response.status}`);\r\n        }\r\n\r\n        const data = await response.json;\r\n\r\n        setLoading(false);\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, error, request, clearError };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}