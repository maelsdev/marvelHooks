{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      \"Content-Type\": \"application/json\"\n    };\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url} status:${response.status}`);\n      }\n\n      const data = response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(true);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"wBqGcGl6EafFNGt940fH8x5vtvA=\");","map":{"version":3,"names":["useCallback","useState","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","ok","Error","status","data","json","e","message","clearError"],"sources":["C:/MAMP/htdocs/projects/marvelHooks/src/hooks/http.hooks.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url} status:${response.status}`);\r\n        }\r\n\r\n        const data = response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(true);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n  return { loading, request, error, clearError };\r\n};\r\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAC3B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;EAEA,MAAMM,OAAO,GAAGP,WAAW,CACzB,gBACEQ,GADF,EAKK;IAAA,IAHHC,MAGG,uEAHM,KAGN;IAAA,IAFHC,IAEG,uEAFI,IAEJ;IAAA,IADHC,OACG,uEADO;MAAE,gBAAgB;IAAlB,CACP;IACHP,UAAU,CAAC,IAAD,CAAV;;IAEA,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;QAAEC,MAAF;QAAUC,IAAV;QAAgBC;MAAhB,CAAN,CAA5B;;MAEA,IAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAW,mBAAkBP,GAAI,WAAUI,QAAQ,CAACI,MAAO,EAA3D,CAAN;MACD;;MAED,MAAMC,IAAI,GAAGL,QAAQ,CAACM,IAAT,EAAb;MAEAd,UAAU,CAAC,KAAD,CAAV;MACA,OAAOa,IAAP;IACD,CAXD,CAWE,OAAOE,CAAP,EAAU;MACVf,UAAU,CAAC,IAAD,CAAV;MACAE,QAAQ,CAACa,CAAC,CAACC,OAAH,CAAR;MACA,MAAMD,CAAN;IACD;EACF,CAzBwB,EA0BzB,EA1ByB,CAA3B;EA4BA,MAAME,UAAU,GAAGrB,WAAW,CAAC,MAAM;IACnCM,QAAQ,CAAC,IAAD,CAAR;EACD,CAF6B,EAE3B,EAF2B,CAA9B;EAGA,OAAO;IAAEH,OAAF;IAAWI,OAAX;IAAoBF,KAApB;IAA2BgB;EAA3B,CAAP;AACD,CApCM;;GAAMnB,O"},"metadata":{},"sourceType":"module"}