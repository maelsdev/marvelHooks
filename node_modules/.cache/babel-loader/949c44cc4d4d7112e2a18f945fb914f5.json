{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = {\n    \"Content-Type\": \"application/json\"\n  }) => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url} status:${response.status}`);\n      }\n\n      const data = response.json();\n      console.log(data);\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(true);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"wBqGcGl6EafFNGt940fH8x5vtvA=\");","map":{"version":3,"sources":["C:/MAMP/htdocs/projects/marvelHooks/src/hooks/http.hooks.js"],"names":["useCallback","useState","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","ok","Error","status","data","json","console","log","e","message","clearError"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMM,OAAO,GAAGP,WAAW,CACzB,OACEQ,GADF,EAEEC,MAAM,GAAG,KAFX,EAGEC,IAAI,GAAG,IAHT,EAIEC,OAAO,GAAG;AAAE,oBAAgB;AAAlB,GAJZ,KAKK;AACHP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACF,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,OAAN,CAA5B;;AAEA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAW,mBAAkBP,GAAI,WAAUI,QAAQ,CAACI,MAAO,EAA3D,CAAN;AACD;;AAED,YAAMC,IAAI,GAAGL,QAAQ,CAACM,IAAT,EAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOa,IAAP;AACD,KAZD,CAYE,OAAOI,CAAP,EAAU;AACVjB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,QAAQ,CAACe,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACD;AACF,GA1BwB,EA2BzB,EA3ByB,CAA3B;AA6BA,QAAME,UAAU,GAAGvB,WAAW,CAAC,MAAM;AACnCM,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAGA,SAAO;AAAEH,IAAAA,OAAF;AAAWI,IAAAA,OAAX;AAAoBF,IAAAA,KAApB;AAA2BkB,IAAAA;AAA3B,GAAP;AACD,CArCM;;GAAMrB,O","sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url} status:${response.status}`);\r\n        }\r\n\r\n        const data = response.json();\r\n        console.log(data);\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(true);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n  return { loading, request, error, clearError };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}